//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""962a1bdc-9b74-45d9-a61c-f377a1348b56"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d41afcae-c781-49f7-8164-6d78af2538cd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""aae4f307-1222-46e4-bc30-1fecfcf047b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LightShove"",
                    ""type"": ""Button"",
                    ""id"": ""9568548c-dd93-4929-a840-31485dfc3dd7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HeavyShove"",
                    ""type"": ""Button"",
                    ""id"": ""3946c64e-94c7-4a92-a918-61c8cd8bc051"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=0.01)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""9288ac1c-d24f-4b10-a0d2-5db012570a45"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fccec25c-e7df-4fa6-b42f-4f3fa1931342"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""EmoteDown"",
                    ""type"": ""Button"",
                    ""id"": ""6c9de9dc-50de-47d9-aec4-bc6d2efa6ed4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EmoteLeft"",
                    ""type"": ""Button"",
                    ""id"": ""07ee5515-018a-438a-bc40-f0e2aac10424"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EmoteRight"",
                    ""type"": ""Button"",
                    ""id"": ""a87ba268-6fa9-4eea-bf92-ab34e7a3acb9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EmoteUp"",
                    ""type"": ""Button"",
                    ""id"": ""dffb8c4b-669a-40d5-bdd1-9548dcba1d9d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""69ccd0ec-5926-4b4e-82f5-417f670d649d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b895834-6540-4ef0-9f42-b5e59842c99b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""085a9295-da1c-401a-b9cb-5627f2b112b3"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LightShove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ed3f68e-4ca7-4d45-a9fa-57caa2b7ed3c"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ba43245-6dce-42e9-bab1-1eaa619841f1"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4028490-84d2-4288-bd39-f48f08757c39"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeavyShove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ade57e2-7cb6-4aae-a712-2ba595dbfe4a"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EmoteDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3edf23da-308f-4d43-bdbf-e245bd812bd5"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EmoteLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8334ec1-28a0-429a-a22d-4b3b9c6633a4"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EmoteRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3a70ce4-4445-488c-82e3-717fe004da7e"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EmoteUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Xbox Controller Scheme"",
            ""bindingGroup"": ""Xbox Controller Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Playstation Control Scheme"",
            ""bindingGroup"": ""Playstation Control Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<DualShockGamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_Movement = m_PlayerMovement.FindAction("Movement", throwIfNotFound: true);
        m_PlayerMovement_Select = m_PlayerMovement.FindAction("Select", throwIfNotFound: true);
        m_PlayerMovement_LightShove = m_PlayerMovement.FindAction("LightShove", throwIfNotFound: true);
        m_PlayerMovement_HeavyShove = m_PlayerMovement.FindAction("HeavyShove", throwIfNotFound: true);
        m_PlayerMovement_Dash = m_PlayerMovement.FindAction("Dash", throwIfNotFound: true);
        m_PlayerMovement_Aim = m_PlayerMovement.FindAction("Aim", throwIfNotFound: true);
        m_PlayerMovement_EmoteDown = m_PlayerMovement.FindAction("EmoteDown", throwIfNotFound: true);
        m_PlayerMovement_EmoteLeft = m_PlayerMovement.FindAction("EmoteLeft", throwIfNotFound: true);
        m_PlayerMovement_EmoteRight = m_PlayerMovement.FindAction("EmoteRight", throwIfNotFound: true);
        m_PlayerMovement_EmoteUp = m_PlayerMovement.FindAction("EmoteUp", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private IPlayerMovementActions m_PlayerMovementActionsCallbackInterface;
    private readonly InputAction m_PlayerMovement_Movement;
    private readonly InputAction m_PlayerMovement_Select;
    private readonly InputAction m_PlayerMovement_LightShove;
    private readonly InputAction m_PlayerMovement_HeavyShove;
    private readonly InputAction m_PlayerMovement_Dash;
    private readonly InputAction m_PlayerMovement_Aim;
    private readonly InputAction m_PlayerMovement_EmoteDown;
    private readonly InputAction m_PlayerMovement_EmoteLeft;
    private readonly InputAction m_PlayerMovement_EmoteRight;
    private readonly InputAction m_PlayerMovement_EmoteUp;
    public struct PlayerMovementActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMovement_Movement;
        public InputAction @Select => m_Wrapper.m_PlayerMovement_Select;
        public InputAction @LightShove => m_Wrapper.m_PlayerMovement_LightShove;
        public InputAction @HeavyShove => m_Wrapper.m_PlayerMovement_HeavyShove;
        public InputAction @Dash => m_Wrapper.m_PlayerMovement_Dash;
        public InputAction @Aim => m_Wrapper.m_PlayerMovement_Aim;
        public InputAction @EmoteDown => m_Wrapper.m_PlayerMovement_EmoteDown;
        public InputAction @EmoteLeft => m_Wrapper.m_PlayerMovement_EmoteLeft;
        public InputAction @EmoteRight => m_Wrapper.m_PlayerMovement_EmoteRight;
        public InputAction @EmoteUp => m_Wrapper.m_PlayerMovement_EmoteUp;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Select.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnSelect;
                @LightShove.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnLightShove;
                @LightShove.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnLightShove;
                @LightShove.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnLightShove;
                @HeavyShove.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnHeavyShove;
                @HeavyShove.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnHeavyShove;
                @HeavyShove.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnHeavyShove;
                @Dash.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnDash;
                @Aim.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnAim;
                @EmoteDown.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnEmoteDown;
                @EmoteDown.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnEmoteDown;
                @EmoteDown.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnEmoteDown;
                @EmoteLeft.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnEmoteLeft;
                @EmoteLeft.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnEmoteLeft;
                @EmoteLeft.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnEmoteLeft;
                @EmoteRight.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnEmoteRight;
                @EmoteRight.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnEmoteRight;
                @EmoteRight.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnEmoteRight;
                @EmoteUp.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnEmoteUp;
                @EmoteUp.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnEmoteUp;
                @EmoteUp.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnEmoteUp;
            }
            m_Wrapper.m_PlayerMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @LightShove.started += instance.OnLightShove;
                @LightShove.performed += instance.OnLightShove;
                @LightShove.canceled += instance.OnLightShove;
                @HeavyShove.started += instance.OnHeavyShove;
                @HeavyShove.performed += instance.OnHeavyShove;
                @HeavyShove.canceled += instance.OnHeavyShove;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @EmoteDown.started += instance.OnEmoteDown;
                @EmoteDown.performed += instance.OnEmoteDown;
                @EmoteDown.canceled += instance.OnEmoteDown;
                @EmoteLeft.started += instance.OnEmoteLeft;
                @EmoteLeft.performed += instance.OnEmoteLeft;
                @EmoteLeft.canceled += instance.OnEmoteLeft;
                @EmoteRight.started += instance.OnEmoteRight;
                @EmoteRight.performed += instance.OnEmoteRight;
                @EmoteRight.canceled += instance.OnEmoteRight;
                @EmoteUp.started += instance.OnEmoteUp;
                @EmoteUp.performed += instance.OnEmoteUp;
                @EmoteUp.canceled += instance.OnEmoteUp;
            }
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);
    private int m_XboxControllerSchemeSchemeIndex = -1;
    public InputControlScheme XboxControllerSchemeScheme
    {
        get
        {
            if (m_XboxControllerSchemeSchemeIndex == -1) m_XboxControllerSchemeSchemeIndex = asset.FindControlSchemeIndex("Xbox Controller Scheme");
            return asset.controlSchemes[m_XboxControllerSchemeSchemeIndex];
        }
    }
    private int m_PlaystationControlSchemeSchemeIndex = -1;
    public InputControlScheme PlaystationControlSchemeScheme
    {
        get
        {
            if (m_PlaystationControlSchemeSchemeIndex == -1) m_PlaystationControlSchemeSchemeIndex = asset.FindControlSchemeIndex("Playstation Control Scheme");
            return asset.controlSchemes[m_PlaystationControlSchemeSchemeIndex];
        }
    }
    public interface IPlayerMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnLightShove(InputAction.CallbackContext context);
        void OnHeavyShove(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnEmoteDown(InputAction.CallbackContext context);
        void OnEmoteLeft(InputAction.CallbackContext context);
        void OnEmoteRight(InputAction.CallbackContext context);
        void OnEmoteUp(InputAction.CallbackContext context);
    }
}
